static const char *demo_vshader_glsl =
"varying vec4 v_glyph;\n"
"varying vec4 v_fill_color;\n"
"varying vec4 v_stroke_color;\n"
"varying float v_stroke_width;\n"
"uniform float u_scale;\n"
"\n"
"vec4\n"
"glyph_vertex_transcode (vec2 v)\n"
"{\n"
"  ivec2 g = ivec2 (v);\n"
"  ivec2 corner = ivec2 (mod (v, 2.));\n"
"  g /= 2;\n"
"  ivec2 nominal_size = ivec2 (mod (vec2(g), 64.));\n"
"  return vec4 (corner * nominal_size, g * 4);\n"
"}\n"
"\n"
"vec3 decode_color(float f)\n"
"{\n"
"  int F = int(f);\n"
"  int r =  F % 256;\n"
"  F = (F - r)/256;\n"
"  int g = F % 256;\n"
"  F = (F - g)/256;\n"
"  int b = F % 256;\n"
"  return vec3(r,g,b)/255.0;\n"
"}\n"
"\n"
"vec2 decode_opacity(float f)\n"
"{\n"
"  int F = int(f);\n"
"  int fillOpacity =  F % 256;\n"
"  F = (F - fillOpacity)/256;\n"
"  int strokeOpacity = F % 256;\n"
"  return vec2( fillOpacity, strokeOpacity  )/255.0;\n"
"}\n"
"\n"
"void\n"
"main()\n"
"{\n"
"  gl_Position = uMvpMatrix * vec4 (aPosition.xy,0.0, 1.0);\n"
"  v_glyph = glyph_vertex_transcode (aTexCoord);\n"
"  v_fill_color.rgb = decode_color( aNormal.x );\n"
"  v_stroke_color.rgb = decode_color( aNormal.y );\n"
"  vec2 opacity = decode_opacity( aNormal.z );\n"
"  v_fill_color.a = opacity[0];\n"
"  v_stroke_color.a = opacity[1];\n"
"  v_stroke_width = aPosition.z*u_scale;\n"
"}\n"
;
